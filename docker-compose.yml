
services:
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.42
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - dev-network
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true

  qdrant:
    container_name: qdrant
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-storage:/qdrant/storage
    networks:
      - dev-network

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - dev-network

  ollama:
    container_name: Ollama
    image: ollama/ollama:latest
#    devices:
#      - driver: nvidia
#        count: 1
#        capabilities: [ "gpu" ]
#
#    runtime: nvidia
#    environment:
#      - OLLAMA_DEBUG=true
#      - OLLAMA_FLASH_ATTENTION=true
#      - OLLAMA_INTEL_GPU=false
#      - NVIDIA_VISIBLE_DEVICES=all
#      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - dev-network

  postgres:
    container_name: postgres
    image: postgres:15
    restart: always
    environment:
      POSTGRES_PASSWORD: welcome
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dev-network

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
#    environment:
#      REDIS_URL: "redis://redis:6379"
#      QDRANT_URL: "http://qdrant:6333"
#      JAEGER_ENDPOINT: "http://jaeger:4317"
#      OLLAMA_URL: "http://ollama:11434"
#      DATABASE_URL: "postgres://postgres:welcome@postgres:5432/postgres"
    depends_on:
      - jaeger
      - qdrant
      - redis
      - ollama
      - postgres
    volumes:
      - uploads-data:/usr/local/bin/uploads
    networks:
      - dev-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - backend
    networks:
      - dev-network

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - dev-network
    depends_on:
      - prometheus

volumes:
  qdrant-storage:
  uploads-data:
  postgres-data:
  ollama-data:
  grafana-data:

networks:
  dev-network:
    name: dev-network
    driver: bridge
